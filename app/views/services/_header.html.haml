.row
  .col-12.col-lg-9.row
    .col-12.col-sm-3.d-flex.img-service-detail
      - if local_assigns[:preview]
        = image_tag backoffice_service_logo_preview_path(service_id: service.id || "new"),
        class: "align-self-center img-fluid"
      - else
        = service_logo(service, "align-self-center img-fluid", "180x120")
    .col-12.col-sm-9.service-details-header
      %h2.font-weight-bolder= service.name
      %p.mb-1= service.tagline
      = render "services/categorization", service: service, highlights: nil

      .row.mt-2
        .col
          .stars
            = print_rating_stars(service.rating)
          .rating
            %span.ml-1.font-weight-bold
              (#{service.rating} /5)
            - if service.persisted?
              = link_to "#{service.service_opinion_count} reviews", service_opinions_path(service),
              class: "ml-1 default-color"
          .comparison
            - unless local_assigns[:preview]
              %span.compare
                %label{ options(service.slug, comparison_enabled) }
                  = check_box_tag "comparison", service.slug, checked?(service.slug), id: "comparison-#{service.id}",
                          class: "form-check-input",
                          disabled: !checked?(service.slug) && comparison_enabled,
                          "data-probe" => "",
                          "data-target": "comparison.checkbox",
                          "data-action": "click->comparison#update"
                  %span.smaller
                    = _("Add to comparison")
          .comparison
            %span.compare
              %label
                = check_box_tag "favourite", service.slug, favourite?(Array(favourite_services), service.slug),
                  id: "favourite-#{service.id}",
                      class: "form-check-input",
                      "data-target": "favourite.checkbox",
                      "data-e2e": "favourite-checkbox",
                      "data-action": "click->favourite#updateFromRes"
                %span.smaller
                  = _("Add to favourites")
  .col-12.col-lg-3.text-center.vertical-center
    .vertical-center-inner.access-type
      - if policy(service).order?
        = link_to _("Access the resource"),
                      service_offers_path(service),
                      class: "btn btn-primary d-block mb-3",
                      "data-probe": ""
      - if user_signed_in? && policy(service).data_administrator?
        %a#dropdown-menu-button.dropdown-toggle.btn.btn-outline-secondary.d-block.mb-3{ "aria-expanded" => "false",
                                                      "aria-haspopup" => "true",
                                                      "data-toggle" => "dropdown",
                                                      type: "button" }
          .menu__label Manage the resource
        .dropdown-menu.shadow
          %ul
            %li
              %a.dropdown-item.dropdown-details{ href:
                Mp::Application.config.providers_dashboard_url +
                "/resource-dashboard/#{resource_organisation_pid(service)}/#{service.pid}/stats",
                target: :_blank, "data-probe": "" }
                = _("Resource dashboard")
            %li
              %a.dropdown-item.dropdown-details{ href:
                Mp::Application.config.providers_dashboard_url +
                "/provider/#{resource_organisation_pid(service)}/resource/update/#{service.pid}",
                target: :_blank, "data-probe": "" }
                = _("Edit resource details")
            %li
              %a.dropdown-item.dropdown-offers{ href: service_ordering_configuration_path(service, anchor: "offers") }
                = _("Set parameters and offers")
      %span.ordertype-label
        %i{ class: "ordertype #{order_type(service)}" }
        -# TODO: refactor dynamic translation
        = t("offers.type.#{order_type(service)}")
.row.service-links
  .col-12.col-lg-9.row
    .col-12.col-sm-3
    .col-12.col-sm-9
      - service_header_fields.select { |h| h[:name] == "links" }.map do |group|
        = render "services/sidebar/simple_links",
                    service: service,
                    fields: group[:fields],
                    nested: group[:nested] || ""
  .col-12.col-sm-3.question-col
    - if local_assigns[:question] && !service.public_contacts.empty?
      = render "services/ask_question", service: service, question: question
