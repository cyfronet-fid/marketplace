- content_for :title, @service.name
- breadcrumb :backoffice_service, @service

.container.p-0.backoffice
  - if @service.offers.blank?
    .alert.alert-danger.mb-0.text-center
      = _("This service has no offers. Add one offer to make possible for a user to Access the service.")
  - elsif @service.published? && @service.offers.published.blank?
    .alert.alert-warning.mb-0.text-center
      -# haml-lint:disable MultilinePipe
      = ("The service is published but has no published offers. Publish one offer to make possible for a user to " + |
         "Access the service.") |
      -# haml-lint:enable MultilinePipe
  = render "services/errors", service: @service

.container.p-0.backoffice
  .status-row
    .row
      .col-12.col-lg-4
        %span
          = _("Status") + ":"
        %span.font-weight-bold= @service.status
      .col-12.col-lg-8.service-buttons
        .btn-group.float-right
          - if policy([:backoffice, @service]).publish?
            = link_to _("Publish"),
                      backoffice_service_publish_path(@service),
                      data: { "turbo-confirm": _("Are you sure you want to publish this service?"),
                              e2e: "publish-btn",
                              "turbo-method": :post },
                      class: "btn btn-success btn-sm"
          - if policy([:backoffice, @service]).suspend?
            = link_to _("Suspend #{@service.type.downcase}"),
                      backoffice_service_draft_path(@service, suspend: true),
                      data: { "turbo-confirm": _("Are you sure you want to publish this service as suspended?"),
                              "turbo-method": :post },
                      class: "btn btn-info btn-sm"
          - if policy([:backoffice, @service]).unpublish?
            = link_to _("Unpublish"),
                      backoffice_service_draft_path(@service),
                      data: { "turbo-confirm": _("Are you sure you want to unpublish this service?"),
                              e2e: "draft-btn",
                              "turbo-method": :post },
                      class: "btn btn-error btn-sm"
          - if policy([:backoffice, @service]).destroy?
            = link_to _("Delete"),
              backoffice_service_path(@service),
              class: "btn btn-danger",
              data: { turbo_confirm: _("Are you sure you want to remove this #{@service.type.downcase}?"),
                      turbo_method: :delete }

.container.p-0.backoffice
  .pt-3.service-box-redesign.service-detail.backoffice{ "data-shepherd-tour-target": "service-box" }
    = render Presentable::HeaderComponent.new(object: @service,
                          title: @service.name,
                          abbreviation: @service.abbreviation,
                          subtitle: @service.tagline,
                          comparison_enabled: @comparison_enabled,
                          show_checkboxes: false,
                          preview: local_assigns[:preview],
                          favourite_services: @favourite_services) do |c|
      - c.buttons do
        = render "components/presentable/header_component/backoffice_service_buttons", service: @service

    = render "services/tabs", service: @service, params: { from: "backoffice_service" }
.tab-content
  = render Presentable::DescriptionComponent.new(object: @service,
    similar_services: @similar_services, related_services: @related_services,
    question: @question, from: "backoffice_service") do |c|
    - c.description_panels do
      = render "layouts/common_parts/services/offers", offers: @offers, service: @service, bundles: @bundles
    - c.additional_backoffice_info do
      .right-panel-links.pt-4.pb-4
        = render "components/presentable/updates", object: @service
