- content_for :title, @service.name
- breadcrumb :backoffice_service, @service
.container
  - if @service.offers.blank?
    .alert.alert-danger.mb-0.text-center
      The service has no offers. Add one offer to make possible for a user to Access the service.
  - elsif @service.published? && @service.offers.published.blank?
    .alert.alert-warning.mb-0.text-center
      The service is published but has no published offers.
      Publish one offer to make possible for a user to Access the service.
  .row
    .col-5.col-md-2
      - if @service.logo.attached? && @service.logo.variable?
        = image_tag @service.logo.variant(resize: "180x180"), class: "border img-fluid"
    .col-7.col-md-6.vertical-middle
      %h1.service-name= @service.name
    .col-12.col-md-4.mt-4
      - if policy([:backoffice, @service]).destroy?
        = link_to t("backoffice.services.destroy.link"),
                  backoffice_service_path(@service),
                  method: :delete, data: { confirm: "Are you sure?" },
                  class: "btn btn-danger float-right"
      - if policy([:backoffice, @offer]).new?
        = link_to t("backoffice.services.offers.new.link"), new_backoffice_service_offer_path(@service),
            class: "btn btn-primary float-right ml-3 mb-3"
      - if policy([:backoffice, @service]).edit?
        = link_to t("backoffice.services.edit.link"),
                  edit_backoffice_service_path(@service),
                  class: "btn btn-primary float-right"
  .container.grey-row.mt-4
    .row
      .col-12.col-sm-6
        %span Status:
        %span.font-weight-bold= @service.status
      .col-12.col-sm-6
        .btn-group.float-right
          - if policy([:backoffice, @service]).publish?
            = link_to t("backoffice.services.publish.link"),
                    backoffice_service_publish_path(@service),
                    method: :post,
                    data: { confirm: "Are you sure you want to publish this service?" },
                    class: "btn btn-success btn-sm"
          - if policy([:backoffice, @service]).publish_unverified?
            = link_to t("backoffice.services.publish_as_unverified.link"),
                    backoffice_service_publish_path(@service, unverified: true),
                    method: :post,
                    data: { confirm: "Are you sure you want to publish this service as unvefiried service?" },
                    class: "btn btn-warning btn-sm"
          - if policy([:backoffice, @service]).draft?
            = link_to t("backoffice.services.draft.link"),
                    backoffice_service_draft_path(@service),
                    method: :post,
                    data: { confirm: "Are you sure you want to stop showing this service?" },
                    class: "btn btn-error btn-sm"
  .row.mt-4
    .col-12.col-sm-8
      %p
        %b= @service.tagline
      %p= @service.description
      .row.mt-5.mb-4
        .col-6
          %h3.m-0.mt-2 Offers
        .col-6
          - if policy([:backoffice, @offer]).new?
            = link_to t("backoffice.services.offers.new.link"), new_backoffice_service_offer_path(@service),
              class: "btn btn-primary btn-sm float-right"
      = render "backoffice/services/offers/offers", service: @service, offers: @offers
    .col-1.separator.d-none.d-xl-block
    .col-12.col-sm-3.info-col
      %h5 Category
      - @service.categories.each do |category|
        %p= category.name

      %h5 Order type
      %p= t("offers.type.#{@service.order_type}") if @service.order_type.present?

      - if @service.access_types.present?
        %h5 Access types
        - @service.access_types.each do |access_type|
          %p= access_type.name

      - if @service.access_modes.present?
        %h5 Access modes
        - @service.access_modes.each do |access_mode|
          %p= access_mode.name


      %h5 Dedicated For
      %ul
        - @service.target_users.each do |group|
          %li= group.name

      %h5 Service Availability
      - if @service.geographical_availabilities.present?
        - map_data = data_for_map(@service.geographical_availabilities) if @service.geographical_availabilities.any?
        - if map_data.present?
          .geographical_availabilities-map{ "data-controller": "map",
                                            "data-geographical_availabilities": map_data,
                                            "data-region": @service.geographical_availabilities.map(&:alpha2) }

      %hr
      %h5 Resource geographic locations
      - if @service.resource_geographic_locations.present?
        - @service.resource_geographic_locations.each do |location|
          %p= location.name
      %h5 Trl
      %p= @service.trl[0].name if @service.trl.present?

      %h5 Life cycle status
      %p= @service.life_cycle_status[0].name if @service.life_cycle_status.present?

      %h5 Activate message
      %p= @service.activate_message

      - unless @service.main_contact.blank?
        %h5 Main contact
        %p
          = @service.main_contact.first_name
          = @service.main_contact.last_name
        %p= @service.main_contact.email

      %h5 Public contacts
      - @service.public_contacts.each do |contact|
        %p= contact.email

      %h5 Domains
      - @service.scientific_domains.each do |domain|
        %p= domain.name

      %h5 Providers
      - @service.providers.each do |provider|
        %p= provider.name

      %h5 Funding Bodies:
      - @service.funding_bodies.each do |body|
        %p= body.name

      %h5 Funding Programs:
      - @service.funding_programs.each do |program|
        %p= program.name

      - if @service.grant_project_names.present?
        %h5 Grant project names:
        - @service.grant_project_names&.each do |name|
          %p= name

      - if @service.certifications.present?
        %h5 Certifications:
        - @service.certifications&.each do |certification|
          %p= certification

      - if @service.standards.present?
        %h5 Standards:
        - @service.standards&.each do |standard|
          %p= standard

      - if @service.open_source_technologies.present?
        %h5 Open source technologies:
        - @service.open_source_technologies&.each do |technology|
          %p= technology


      %h5 Upstream External Source
      %p= @service.upstream || "MP"

      %h5 External Sources
      - @service.sources.each do |source|
        %p
          - if @service.upstream_id == source.id
            %i.fas.fa-check
          = source

      %h5 Version
      %p= @service&.version

      - if @service.last_update.present?
        %h5 Last external update
        %p= l @service.last_update, format: :short

      %h5 Updated at
      %p= l @service.updated_at, format: :short
