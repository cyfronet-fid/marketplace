- breadcrumb :backoffice_service, @service
.container
  .row
    .col-5.col-md-2
      - if @service.logo.attached?
        = image_tag @service.logo.variant(resize: "180x180"), class: "border img-fluid"
    .col-7.col-md-6.vertical-middle
      %h1.service-name= @service.title
    .col-12.col-md-4.mt-4
      - if policy([:backoffice, @service]).destroy?
        = link_to "Decommission",
                  backoffice_service_path(@service),
                  method: :delete, data: { confirm: "Are you sure?" },
                  class: "btn btn-danger float-right"
      - if policy([:backoffice, @offer]).new?
        = link_to t("backoffice.service.offer.new"), new_backoffice_service_offer_path(@service),
            class: "btn btn-primary float-right ml-3 mb-3"
      - if policy([:backoffice, @service]).edit?
        = link_to t("backoffice.service.edit"),
                  edit_backoffice_service_path(@service),
                  class: "btn btn-primary float-right"
  .container.grey-row.mt-4
    .row
      .col-12.col-sm-6
        %span Status:
        %span.font-weight-bold= @service.status
      .col-12.col-sm-6
        .btn-group.float-right
          - if policy([:backoffice, @service]).publish?
            = link_to "Publish",
                    backoffice_service_publish_path(@service),
                    method: :post,
                    data: { confirm: "Are you sure you want to publish this service?" },
                    class: "btn btn-success btn-sm"
          - if policy([:backoffice, @service]).publish_unverified?
            = link_to "Publish as unverified service",
                    backoffice_service_publish_path(@service, unverified: true),
                    method: :post,
                    data: { confirm: "Are you sure you want to publish this service as unvefiried service?" },
                    class: "btn btn-warning btn-sm"
          - if policy([:backoffice, @service]).draft?
            = link_to "Stop showing in the MP",
                    backoffice_service_draft_path(@service),
                    method: :post,
                    data: { confirm: "Are you sure you want to stop showing this service?" },
                    class: "btn btn-error btn-sm"
  .row.mt-4
    .col-12.col-sm-8
      %p
        %b= @service.tagline
      %p= @service.description
      .row.mt-5.mb-4
        .col-6
          %h3.m-0.mt-2 Offers
        .col-6
          - if policy([:backoffice, @offer]).new?
            = link_to "Add new offer", new_backoffice_service_offer_path(@service),
              class: "btn btn-primary btn-sm float-right"
      = render "backoffice/services/offers/offers", service: @service
    .col-1.separator.d-none.d-xl-block
    .col-12.col-sm-3.info-col
      %h5 Category
      - @service.categories.each do |category|
        %p= category.name

      %h5 Service type
      %p= @service.service_type

      %h5 Dedicated For
      %ul
        - @service.target_groups.each do |group|
          %li= group.name

      %hr

      %h5 Phase
      %p= t "simple_form.options.service.phase.#{@service.phase}"

      %h5 Service type
      %p= @service.service_type

      %h5 Activate message
      %p= @service.activate_message

      %h5 Contact emails
      - @service.contact_emails.each do |email|
        %p= email

      %h5 Areas
      - @service.research_areas.each do |area|
        %p= area.name

      %h5 Providers
      - @service.providers.each do |provider|
        %p= provider.name

      %h5 Upstream External Source
      %p= @service.upstream || "MP"

      %h5 External Sources
      - @service.sources.each do |source|
        %p
          - if @service.upstream_id == source.id
            %i.fas.fa-check
          = source
