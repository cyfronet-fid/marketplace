- content_for :title, @service.name
- breadcrumb :backoffice_service, @service
.container
  - if @service.offers.blank?
    .alert.alert-danger.mb-0.text-center
      = _("This service has no offers. Add one offer to make possible for a user to Access the service.")
  - elsif @service.published? && @service.offers.published.blank?
    .alert.alert-warning.mb-0.text-center
      -# haml-lint:disable MultilinePipe
      = ("The service is published but has no published offers. Publish one offer to make possible for a user to " + |
         "Access the service.") |
      -# haml-lint:enable MultilinePipe
  = render "services/errors", service: @service

.container
  .status-row
    .row
      .col-12.col-lg-4
        %span
          = _("Status") + ":"
        %span.font-weight-bold= @service.status
      .col-12.col-lg-8.service-buttons
        .btn-group.float-right
          - if policy([:backoffice, @service]).publish?
            = link_to _("Publish"),
                      backoffice_service_publish_path(@service),
                      method: :post,
                      data: { confirm: _("Are you sure you want to publish this service?"), e2e: "publish-btn" },
                      class: "btn btn-success btn-sm"
          - if policy([:backoffice, @service]).publish_unverified?
            = link_to _("Publish as unverified service"),
                      backoffice_service_publish_path(@service, unverified: true),
                      method: :post,
                      data: { confirm: _("Are you sure you want to publish this service as unverified service?") },
                      class: "btn btn-warning btn-sm"
          - if policy([:backoffice, @service]).draft?
            = link_to _("Stop showing in the MP"),
                      backoffice_service_draft_path(@service),
                      method: :post,
                      data: { confirm: _("Are you sure you want to stop showing this service?"), e2e: "draft-btn" },
                      class: "btn btn-error btn-sm"


.container
  .pt-4.pl-3.pr-3.shadow-sm.rounded.service-box.service-detail.backoffice{ "data-shepherd-tour-target": "service-box" }
    = render Presentable::HeaderComponent.new(object: @service,
                          title: @service.name,
                          abbreviation: @service.abbreviation,
                          subtitle: @service.tagline,
                          comparison_enabled: @comparison_enabled,
                          show_checkboxes: false,
                          preview: local_assigns[:preview],
                          question: @question,
                          favourite_services: @favourite_services) do |c|
      - c.buttons do
        = render "components/presentable/header_component/backoffice_service_buttons", service: @service

    = render "services/tabs", service: @service, params: { from: "backoffice_service" }
.tab-content
  = render Presentable::DescriptionComponent.new(object: @service, from: "backoffice_service") do |c|
    - c.description_panels do
      = render "layouts/common_parts/services/offers", offers: @offers, service: @service, bundles: @bundles
    - c.sidebar_options do
      %h5
        = _("Updates")
      %ul.list-group
        - if @service.synchronized_at.present?
          %li.list-group-item
            %span
              = _("Synchronized at") + ":"
            %strong.text-dark= l @service.synchronized_at, format: :short
        %li.list-group-item
          %span
            = _("Updated at") + ":"
          %strong.text-dark= l @service.updated_at, format: :short
  = render "taggable/details_section", taggable: @service

.container.mt-4.pt-4.related-container
  = render "services/related", related_services: @similar_services, title: @similar_services_title

  = render "services/related", related_services: @related_services, title: @related_services_title
