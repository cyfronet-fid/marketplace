= simple_form_for [:backoffice, service] do |f|
  = f.error_notification
  .row
    .col-12.col-md-10
      = f.input :logo
      = f.input :title
      = f.input :tagline
      = f.input :tag_list, input_html: { value: service.tag_list.to_s }
      .service-description
        = f.input :description
  .row.mt-5
    .col-12.col-md-5
      = f.input :service_type, collection: Service.service_types.keys.map(&:to_sym)

  = f.association :categories, multiple: true
  = f.association :providers, multiple: true
  = f.association :platforms, multiple: true
  = f.association :research_areas, input_html: { multiple: true }, include_hidden: false
  = f.association :target_groups,
                  label: "Dedicated For",
                  input_html: { multiple: true },
                  include_hidden: false
  .row.mt-5
    .col-12.col-md-5
      = f.association :owners, multiple: true
  .row.service-contact-emails
    .col-12.col-md-6
      = f.input :contact_emails, multiple: true, as: :array
      %a#add-email-field.text-primary Add additional email
  .row.mt-5
    .col-12.col-md-5
      = f.input :places
      = f.input :languages
  .row
    .col-12.col-md-10
      = f.input :terms_of_use
      = f.input :connected_url, label: "Service website"
      = f.input :terms_of_use_url
      = f.input :access_policies_url
      = f.input :corporate_sla_url
      = f.input :webpage_url
      = f.input :manual_url
      = f.input :helpdesk_url
      = f.input :tutorial_url
  .row
    .col-12.col-md-5
      = f.input :phase, collection: Service.phases.values.map(&:to_sym)
      = f.input :restrictions
  .row.service-activate-message
    .col-12.col-md-10
      = f.input :activate_message
  .row.mt-5
    .col-12.col-md-5
      = f.input :upstream_id, collection: f.object.sources.reject { |source| source.id.nil? },
                              include_blank: "MP", label: "Service Upstream"
      = f.fields_for :sources do |sources_form|
        = sources_form.hidden_field :id
        = sources_form.input :source_type, collection: ServiceSource.source_types.keys.map(&:to_sym)
        = sources_form.input :eid, label: "eInfraCentral External ID"
        - unless sources_form.object.id.nil?
          = sources_form.check_box :_destroy
          = sources_form.label :_destroy, "Remove external source"


  .invalid-feedback{ styles: "display:block" }

  %hr.bottom-hr.mt-5.mb-4

  .row.mt-5
    .col-12.col-md-6.mb-3
      = back_link_to "Cancel and back to previous page", service, prefix: :backoffice,
      class: "text-left flex-grow-1 text-uppercase"
    .col-12.col-md-6
      = f.button :submit, class: "btn btn-primary pl-5 pr-5 float-right"


:javascript
  $(document).ready(function() {
    $("#add-email-field").click(function(event){
      event.preventDefault();
      var lastEmailField = document.createElement("input");
      var parent = document.getElementsByClassName("service_contact_emails");

      lastEmailField.type = "email";
      lastEmailField.name = "service[contact_emails][]";
      lastEmailField.id = "service_contact_emails_"+(parent[0].children.length - 1)

      parent[0].appendChild(lastEmailField);
      });

      $(".simple_form").submit(function (event){
        $(this).find(':input[type=email]').filter(function() { return !this.value; }).remove()
        return true;
      });
  });
