= simple_form_for [:backoffice, service], html: { "data-controller" => "service" }  do |f|
  = f.error_notification
  .row
    .col-12.col-md-10
      = f.input :last_update, as: :date_time_picker, disabled: true
      = f.input :version, disabled: cant_edit(:version)
      = f.input :logo, disabled: cant_edit(:logo)
      = f.input :name, disabled: cant_edit(:name)
      = f.input :tagline, disabled: cant_edit(:tagline)
      = f.input :tag_list, input_html: { value: service.tag_list.to_s }, disabled: cant_edit(:tag_list)
      .service-description
        = f.input :description, disabled: cant_edit(:description)
  .row.mt-5
    .col-12.col-md-5
      = f.input :order_type, collection: Service.order_types.keys.map(&:to_sym),
        disabled: cant_edit(:order_type)

  = f.input :multimedia, input_html: { multiple: true, data: { choice: true } },
    disabled: cant_edit([multimedia: []])
  = f.association :categories, multiple: true, input_html: { data: { choice: true } },
                  disabled: cant_edit([category_ids: []])
  = f.association :resource_organisation, disabled: cant_edit(:resource_organisation_id)
  = f.association :providers, multiple: true, input_html: { data: { choice: true } },
                  disabled: cant_edit([provider_ids: []])
  = f.association :platforms, multiple: true, input_html: { data: { choice: true } },
                  disabled: cant_edit([platform_ids: []])
  = f.association :scientific_domains, input_html: { data: { choice: true } }, include_hidden: false,
                  disabled: cant_edit([scientific_domain_ids: []]),
                  collection: ScientificDomain.child_names.map { |name, sd| [name, sd.id] },
                  label_method: :first, value_method: :second
  = f.association :target_users,
                  label: "Dedicated For",
                  input_html: { data: { choice: true }, class: "target_users" },
                  include_hidden: false,
                  disabled: cant_edit([target_user_ids: []])
  = f.association :funding_bodies, input_html: { data: { choice: true } },
                  disabled: cant_edit([funding_body_ids: []])
  = f.association :funding_programs, input_html: { data: { choice: true } },
                  disabled: cant_edit([funding_program_ids: []])
  = f.association :trl, input_html: { data: { choice: true } },
                  disabled: cant_edit([trl_ids: []])
  = f.association :life_cycle_status, input_html: { data: { choice: true } },
                  disabled: cant_edit([life_cycle_status_ids: []])
  = f.association :access_types, input_html: { data: { choice: true } },
                  disabled: cant_edit([access_type_ids: []])
  = f.association :access_modes, input_html: { data: { choice: true } },
                  disabled: cant_edit([access_mode_ids: []])

  = f.association :required_services, multiple: true, input_html: { data: { choice: true } }

  = f.association :related_services, multiple: true, input_html: { data: { choice: true } }

  .row.mt-5
    .col-12.col-md-5
      = f.association :owners, multiple: true, input_html: { data: { choice: true } },
                      disabled: cant_edit([owner_ids: []])
  .row.mt-5
    .col-12.col-md-6
      %h3 Main Contact
      = f.fields_for :main_contact do |main_contact_form|
        = main_contact_form.hidden_field :id
        = main_contact_form.input :first_name
        = main_contact_form.input :last_name
        = main_contact_form.input :email
        = main_contact_form.input :organisation
        = main_contact_form.input :position
  .row.service-contact-emails{ "data-target": "service.publicContacts" }
    .col-12.col-md-6
      %h3 Public contacts
      = f.fields_for :public_contacts, multiple: true, as: :array,
        wrapper_html: { "data-target" => "service.publicContact" },
        disabled: cant_edit([public_contacts: []]) do |public_contact_form|
        = render "public_contact_fields", public_contact_form: public_contact_form
      = link_to "Add additional public contact", "#", class: "btn btn-primary",
        data: { "target": "service.addContact",
        "action": "click->service#addContact",
        "fields": f.fields_for(:public_contacts, PublicContact.new,
        child_index: "new_field") { |public_contact_form| render "public_contact_fields",
        public_contact_form: public_contact_form } }
  .row.mt-5
    .col-12.col-md-10
      = f.input :order_target, label: "Service Order Target", disabled: cant_edit(:order_target)

  .row.mt-5
    .col-12.col-md-5
      = f.input :language_availability, input_html: { multiple: true, data: { choice: true } }, include_hidden: false,
      collection: I18nData.languages.map { |k, v| [v, k] }, disabled: cant_edit([language_availability: []])
      = f.input :geographical_availabilities, as: :select,
        collection: Country.options.map { |c| [ c.name, "value" => c.alpha2 ] },
        disabled: cant_edit([geographical_availabilities: []]),
        input_html: { data: { choice: true },  "multiple" => "true" }
      = f.input :resource_geographic_locations, as: :select,
        collection: Country.options.map { |c| [ c.name, "value" => c.alpha2 ] },
        disabled: cant_edit([resource_geographic_locations: []]),
        input_html: { data: { choice: true },  "multiple" => "true" }
  .row.mt-5
    .col-12.col-md-5
      = f.input :certifications, input_html: { multiple: true, data: { choice: true } },
        disabled: cant_edit([certifications: []])
      = f.input :standards, input_html: { multiple: true, data: { choice: true } },
        disabled: cant_edit([standards: []])
      = f.input :open_source_technologies, input_html: { multiple: true, data: { choice: true } },
        disabled: cant_edit([open_source_technologies: []])
      = f.input :grant_project_names, input_html: { multiple: true, data: { choice: true } },
        disabled: cant_edit([grant_project_names: []])
  .row.service-changelog
    .col-12.col-md-10
      = f.input :changelog, multiple: true, as: :array, disabled: cant_edit([changelog: []]),
       wrapper_html: { "data-target" => "service.array" },
       input_html: { "data-target": "service.input", class: "form-control text optional" }

      %a.text-primary{ "data-action" => "click->service#addNewArrayField" } Add additional entry
  .row
    .col-12.col-md-10
      = f.input :terms_of_use_url, disabled: cant_edit(:terms_of_use_url)
      = f.input :access_policies_url, disabled: cant_edit(:access_policies_url)
      = f.input :privacy_policy_url, disabled: cant_edit(:privacy_policy_url)
      = f.input :sla_url, disabled: cant_edit(:sla_url)
      = f.input :use_cases_url, input_html: { multiple: true, data: { choice: true } },
        disabled: cant_edit([use_cases_url: []])
      = f.input :webpage_url, disabled: cant_edit(:webpage_url)
      = f.input :manual_url, disabled: cant_edit(:manual_url)
      = f.input :helpdesk_url, disabled: cant_edit(:helpdesk_url)
      = f.input :helpdesk_email, input_html: { type: "text" }, disabled: cant_edit(:helpdesk_email)
      = f.input :security_contact_email, input_html: { type: "text" }, disabled: cant_edit(:security_contact_email)
      = f.input :training_information_url, disabled: cant_edit(:training_information_url)
      = f.input :status_monitoring_url, disabled: cant_edit(:status_monitoring_url)
      = f.input :maintenance_url, disabled: cant_edit(:maintenance_url)
      = f.input :order_url, disabled: cant_edit(:order_url)
      = f.input :payment_model_url, disabled: cant_edit(:payment_model_url)
      = f.input :pricing_url, disabled: cant_edit(:pricing_url)
  .row
    .col-12.col-md-5
      = f.input :restrictions, disabled: cant_edit(:restrictions)
  .row.service-activate-message
    .col-12.col-md-10
      = f.input :activate_message, disabled: cant_edit(:activate_message)
  .row.mt-5
    .col-12.col-md-5
      = f.input :upstream_id, collection: f.object.sources.reject { |source| source.id.nil? },
                              include_blank: "MP", label: "Service Upstream"

      %h3 External Sources

      = f.fields_for :sources do |sources_form|
        = sources_form.hidden_field :id
        = sources_form.input :source_type, collection: ServiceSource.source_types.keys.map(&:to_sym)
        = sources_form.input :eid, label: "eInfraCentral External ID"
        - unless sources_form.object.id.nil?
          = sources_form.check_box :_destroy
          = sources_form.label :_destroy, "Remove external source"


  .invalid-feedback{ styles: "display:block" }

  %hr.bottom-hr.mt-5.mb-4

  .row.mt-5
    .col-12
      = f.button :button, "Preview",
        name: "commit",
        value: "Preview",
        class: "btn btn-primary pl-5 pr-5 mr-5"
      = f.button :submit, class: "btn btn-primary pl-5 pr-5 mr-5"
      = back_link_to "Cancel and back to previous page", service, prefix: :backoffice,
        class: "text-left flex-grow-1 text-uppercase"
